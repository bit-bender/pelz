enclave
{
  from "sgx_tsgxssl.edl" import *;
  from "sgx_pthread.edl" import *;
  from "kmyth_enclave.edl" import *;
  include "sgx_dh.h"
  include "cipher/pelz_aes_keywrap_3394nopad.h"
  include "pelz_request_handler.h"
  include "common_table.h"
  include "channel_table.h"
  include "key_load.h"
  include "charbuf.h"
  include "dh_datatypes.h"

  trusted
  {

    /**
     * <pre>
     * This function destroys the table specified by type.
     * <pre>
     *
     * @param[in] type The type of table to be destroyed (ex: key_table or server_table)
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus table_destroy(TableType type);

    /**
     * <pre>
     * This function deletes a value in hash table based on location in id.
     * <pre>
     *
     * @param[in] type The table type that the id and value needs to be deleted from
     * @param[in] id.chars Table value identifier 
     * @param[in] id.len The length of the identifier
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus table_delete(TableType type, charbuf id);

    /**
     * <pre>
     * This function outputs the number of entries of the TableType specificed by type.
     * <pre>
     *
     * @param[in] type The table type
     * @param[out] count Table number of entries
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus table_id_count(TableType type, [out] size_t *count);

    /**
     * <pre>
     * This function outputs the <id> at index value of the TableType specificed by type.
     * <pre>
     *
     * @param[in] type The table type
     * @param[in] index The index value indicating the location of <id> in TableType
     * @param[out] id.chars Table value identifier
     * @param[out] id.len The length of the identifier
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus table_id(TableType type, size_t index, [out] charbuf* id);

    /**
     * <pre>
     * This function to add values into the server hash table.
     * </pre>
     *
     * @param[in] type The table type
     * @param[in] handle The handle value for the cert data location in the kmyth unseal data table
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus add_cert_to_table(TableType type, uint64_t handle);

    public int empty_CA_table(void);
    
    /**
     * <pre>
     * This function initializes a pkey.
     * <pre>
     *
     * @param[in] private_pkey The pointer for pkey to be initialized
     * @param[out] private_pkey The initialized pkey
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus private_pkey_init(void);

    /**
     * <pre>
     * This function frees the pkey.
     * <pre>
     *
     * @param[in] private_pkey The pointer for pkey to be freed
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus private_pkey_free(void);

    /**
     * <pre>
     * This function adds a pkey from unseal table based on handle.
     * </pre>
     *
     * @param[in] handle The handle value for the pkey data location in the kmyth unseal data table
     * @param[in] private_pkey The empty or old pkey
     * @param[out] private_pkey The new pkey
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus private_pkey_add(uint64_t pkey_handle, uint64_t cert_handle);

    /**
     * <pre>
     * This function to add values in hash table based on location in key_id.
     * </pre>
     *
     * @param[in] key_id.chars Key identifier
     * @param[in] key_id.len The length of the key identifier
     * @param[in] key.chars The key value
     * @param[in] key.len The length of the key
     * @param[in] key_table The key table that the new key needs to be added to
     * @param[out] key_table The key table with the new added key
     *
     * @return 0 on success, 1 on error
     */
    public TableResponseStatus key_table_add_key(charbuf key_id, charbuf key);

    /**
     * <pre>
     * This function to add values in hash table based on location in key_id.
     * </pre>
     *
     * @param[in] key_id.chars Key identifier
     * @param[in] key_id.len The length of the key identifier
     * @param[in] handle The handle value for the key data location in the kmyth unseal data table
     * @param[in] key_table The key table that the new key needs to be added to
     * @param[out] key_table The key table with the new added key
     *
     * @return 0 on success, 1 on error
     */
    public TableResponseStatus key_table_add_from_handle(charbuf key_id, uint64_t handle);

    /**
     * <pre>
     * This function to add values in hash table based on location in key_id.
     * </pre>
     *
     * @param[in] key_id.chars Key identifier
     * @param[in] key_id.len The length of the key identifier
     * @param[in] server_id.chars Server identifier
     * @param[in] server_id.len The length of the server identifier
     * @param[in] port.chars The connection port to server
     * @param[in] port.len The length of the port chars
     * @param[in] server_key_id.chars Key on server identifier
     * @param[in] server_key_id.len The length of the key on server identifier
     * @param[in] key_table The key table that the new key needs to be added to
     * @param[out] key_table The key table with the new added key
     *
     * @return 0 on success, 1 on error
     */
    public TableResponseStatus key_table_add_from_server(charbuf key_id, 
                                                         charbuf server_id,
                                                         charbuf port,
                                                         charbuf server_key_id);

    /**
     * <pre>
     * This function initializes the channel table.
     * <pre>
     *
     * @param[in] entry_num  Number of charbuf slots allocated to the channel table.
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus chan_table_init(size_t entry_num);

    /**
     * <pre>
     * This function destroys the channel table.
     * <pre>
     *
     * @return OK on success, an error message indicating the type of
     *                    error otherwise.
     */
    public TableResponseStatus chan_table_destroy();

    /**
     * <pre>
     * Handle an attestation request by generating the message 1 response and a session id
     * <pre>
     *
     * @param[out] dh_msg1     the generated response message
     * @param[out] session_id  the generated session identifier
     *
     * @return 0 on success, an error number indicating the type of error otherwise.
     */
    public uint32_t session_request([out] sgx_dh_msg1_t *dh_msg1, [out] uint32_t *session_id);

    /**
     * <pre>
     * Process attestation message 2 and generate message 3.
     * <pre>
     *
     * @param[in] dh_msg2     a pointer to the received message 2
     * @param[out] dh_msg3    the generated message 3 response
     * @param[in] session_id  the session identifier
     *
     * @return 0 on success, an error number indicating the type of error otherwise.
     */
    public uint32_t exchange_report([in] sgx_dh_msg2_t *dh_msg2, [out] sgx_dh_msg3_t *dh_msg3, uint32_t session_id);

    /**
     * <pre>
     * Respond to the request from the peer enclave to close the session.
     * <pre>
     *
     * @param[in] session_id  the session identifier
     *
     * @return 0 on success, an error number indicating the type of error otherwise.
     */
    public uint32_t end_session(uint32_t session_id);

    /**
     * <pre>
     * Process an incoming secure socket pelz request message.
     * <pre>
     *
     * @param[in]  session_id        the session identifier
     * @param[in]  req_message       a pointer to the incoming message
     * @param[in]  req_message_size  the size of the incoming message
     * @param[in]  max_payload_size  the maximum size of the outgoing message payload
     * @param[in]  max_resp_message_size
     * @param[out] resp_message      a pointer to the outgoing response message
     * @param[out] resp_message_size the size of the outgoing response message
     *
     * @return 0 on success, an error number indicating the type of error otherwise.
     */
    public uint32_t handle_secure_socket_msg(
                      uint32_t session_id,
                      [in, size=req_message_size] secure_message_t *req_message,
                      size_t req_message_size,
                      size_t max_payload_size,
                      size_t max_resp_message_size,
                      [out, size=max_resp_message_size] secure_message_t *resp_message,
                      [out] size_t *resp_message_size);


    /**
     * <pre>
     * Process an incoming unsecure socket pelz request message.
     * <pre>
     *
     * @param[in]  req_msg_in        the incoming message buffer
     * @param[in]  req_msg_size      the size (in bytes) of the incoming message
     * @param[out] resp_msg_out      a pointer to the outgoing response message
     *                               buffer
     * @param[out] resp_msg_out_size a pointer to the size of the outgoing
     *                               response message
     *
     * @return 0 on success, an error number indicating the type of error otherwise.
     */
    public uint32_t handle_unsecure_socket_msg(
                      [in, size=req_msg_in_size] unsigned char *req_msg_in,
                      size_t req_msg_in_size,
                      [out] unsigned char **resp_msg_out,
                      [out] size_t *resp_msg_out_size);

    /**
     * <pre>
     * Retrieve the contents of the most recent pelz request for this session.
     * <pre>
     *
     * @param[in] session_id            the session identifier
     * @param[out] request_data         a pointer to the request data, allocated inside the call
     * @param[out] request_data_length  the size of the request data
     *
     * @return 0 on success, an error number indicating the type of error otherwise.
     */
    public uint32_t get_request_data(uint32_t session_id, [out] char **request_data, [out] size_t *request_data_length);

    /**
     * <pre>
     * Store the contents of the next pelz response for this session.
     * <pre>
     *
     * @param[in] session_id             the session identifier
     * @param[out] response_data         a pointer to the response data
     * @param[out] response_data_length  the size of the response data
     *
     * @return 0 on success, an error number indicating the type of error otherwise.
     */
    public uint32_t save_response_data(uint32_t session_id, [in, count=response_data_length] char *response_data, size_t response_data_length);
  };

  untrusted
  {

    /**
     * <pre>
     * Malloc untrusted memory from within the enclave. The result must
     * be checked to ensure it lies outside the enclave by calling
     * sgx_is_outside_enclave(*buf, size);
     * <pre>
     *
     * @param[in]     size the size to allocate (in bytes).
     * @param[in,out] buf  a pointer to a pointer to hold the allocated space
     *
     * @return none
     */
    void ocall_malloc(size_t size, [out] unsigned char** buf);

    /**
     * <pre>
     * Frees untrusted memory from within the enclave. If the length of the
     * buffer is available the caller should check that it is entirely outside
     * enclave memory by calling
     * sgx_is_outside_enclave(ptr, len);
     * <pre>
     *
     * @param[in] ptr the pointer to be freed
     * @param[in] len the length of the buffer pointed to by ptr
     *
     * @return none
     */
    void ocall_free([user_check] void* ptr, size_t len);

  };

};

