/*
 * test_helper_functions.h
 */

#ifndef TEST_DEFINES_H_
#define TEST_DEFINES_H_

typedef enum
{
  MSG_TEST_SELECT_START,
  ASN1_CREATE_FUNCTIONALITY,
  ASN1_CREATE_DER_ENCODE_NULL_MSG_IN,
  ASN1_CREATE_DER_ENCODE_NULL_BUF_OUT,
  ASN1_CREATE_DER_ENCODE_INVALID_FORMAT,
  ASN1_CREATE_DER_ENCODE_FUNCTIONALITY,
  ASN1_PARSE_NULL_MSG_IN,
  ASN1_PARSE_INVALID_MSG_TYPE_TAG,
  ASN1_PARSE_INVALID_MSG_TYPE_LO,
  ASN1_PARSE_INVALID_MSG_TYPE_HI,
  ASN1_PARSE_INVALID_REQ_TYPE_TAG,
  ASN1_PARSE_INVALID_REQ_TYPE_LO,
  ASN1_PARSE_INVALID_REQ_TYPE_HI,
  ASN1_PARSE_INVALID_CIPHER_TAG,
  ASN1_PARSE_INVALID_KEY_ID_TAG,
  ASN1_PARSE_INVALID_DATA_TAG,
  ASN1_PARSE_INVALID_STATUS_TAG,
  ASN1_PARSE_FUNCTIONALITY,
  ASN1_PARSE_DER_DECODE_NULL_BUF_IN,
  ASN1_PARSE_DER_DECODE_EMPTY_BUF_IN,
  ASN1_PARSE_DER_DECODE_INVALID_FORMAT,
  ASN1_PARSE_DER_DECODE_FUNCTIONALITY,
  CMS_SIGN_NULL_BUF_IN,
  CMS_SIGN_EMPTY_BUF_IN,
  CMS_SIGN_NULL_CERT_IN,
  CMS_SIGN_NULL_PRIV_IN,
  CMS_SIGN_FUNCTIONALITY,
  CMS_SIGN_DER_ENCODE_NULL_MSG_IN,
  CMS_SIGN_DER_ENCODE_NULL_BUF_OUT,
  CMS_SIGN_DER_ENCODE_INVALID_FORMAT,
  CMS_SIGN_DER_ENCODE_FUNCTIONALITY,
  CMS_VERIFY_NULL_MSG_IN,
  CMS_VERIFY_NULL_CERT_OUT,
  CMS_VERIFY_NULL_BUF_OUT,
  CMS_VERIFY_FUNCTIONALITY,
  CMS_VERIFY_DER_DECODE_NULL_BUF_IN,
  CMS_VERIFY_DER_DECODE_EMPTY_BUF_IN,
  CMS_VERIFY_DER_DECODE_INVALID_FORMAT,
  CMS_VERIFY_DER_DECODE_FUNCTIONALITY,
  CMS_ENCRYPT_NULL_BUF_IN,
  CMS_ENCRYPT_EMPTY_BUF_IN,
  CMS_ENCRYPT_NULL_CERT_IN,
  CMS_ENCRYPT_FUNCTIONALITY,
  CMS_ENCRYPT_DER_ENCODE_NULL_MSG_IN,
  CMS_ENCRYPT_DER_ENCODE_NULL_BUF_OUT,
  CMS_ENCRYPT_DER_ENCODE_INVALID_FORMAT,
  CMS_ENCRYPT_DER_ENCODE_FUNCTIONALITY,
  CMS_DECRYPT_NULL_MSG_IN,
  CMS_DECRYPT_NULL_CERT,
  CMS_DECRYPT_NULL_PRIV,
  CMS_DECRYPT_NULL_BUF_OUT,
  CMS_DECRYPT_FUNCTIONALITY,
  CMS_DECRYPT_DER_DECODE_NULL_BUF_IN,
  CMS_DECRYPT_DER_DECODE_EMPTY_BUF_IN,
  CMS_DECRYPT_DER_DECODE_INVALID_FORMAT,
  CMS_DECRYPT_DER_DECODE_FUNCTIONALITY,
  CONSTRUCT_NULL_MSG_DATA_IN,
  CONSTRUCT_NULL_CERT,
  CONSTRUCT_NULL_PRIV,
  CONSTRUCT_NULL_PEER_CERT,
  CONSTRUCT_NULL_BUF_OUT,
  CONSTRUCT_FUNCTIONALITY,
  DECONSTRUCT_NULL_MSG_IN,
  DECONSTRUCT_EMPTY_MSG_IN,
  DECONSTRUCT_INVALID_SIZE_MSG_IN,
  DECONSTRUCT_NULL_CERT,
  DECONSTRUCT_NULL_PRIV,
  DECONSTRUCT_NULL_PEER_CERT_OUT,
  DECONSTRUCT_NULL_MSG_DATA_OUT,
  DECONSTRUCT_FUNCTIONALITY,
  PELZ_MSG_END_TO_END,
  MSG_TEST_SELECT_END
} MsgTestSelect;

typedef enum
{
  REQ_TEST_SELECT_START,
  REQ_TEST_WRAP_NULL_KEY_ID,
  REQ_TEST_WRAP_EMPTY_KEY_ID,
  REQ_TEST_WRAP_NULL_CIPHER_NAME,
  REQ_TEST_WRAP_EMPTY_CIPHER_NAME,
  REQ_TEST_WRAP_INVALID_CIPHER_NAME,
  REQ_TEST_WRAP_NULL_PT_IN,
  REQ_TEST_WRAP_EMPTY_PT_IN,
  REQ_TEST_UNWRAP_NULL_KEY_ID,
  REQ_TEST_UNWRAP_EMPTY_KEY_ID,
  REQ_TEST_UNWRAP_NULL_CIPHER_NAME,
  REQ_TEST_UNWRAP_EMPTY_CIPHER_NAME,
  REQ_TEST_UNWRAP_INVALID_CIPHER_NAME,
  REQ_TEST_UNWRAP_NULL_CT_IN,
  REQ_TEST_UNWRAP_EMPTY_CT_IN,
  REQ_TEST_WRAP_INVALID_KEY,
  REQ_TEST_UNWRAP_INVALID_KEY,
  REQ_TEST_WRAP_FUNCTIONALITY,
  REQ_TEST_UNWRAP_FUNCTIONALITY,
  REQ_TEST_WRAP_UNWRAP,
  REQ_TEST_SELECT_END
} ReqTestSelect;

typedef enum
{
  MSG_TEST_OK,
  MSG_TEST_UNKNOWN_ERROR,
  MSG_TEST_INVALID_TEST_PARAMETER,
  MSG_TEST_INVALID_TEST_SELECTION,
  MSG_TEST_SETUP_ERROR,
  MSG_TEST_PARAM_HANDLING_OK,
  MSG_TEST_PARAM_HANDLING_ERROR,
  MSG_TEST_ASN1_CREATE_ERROR,
  MSG_TEST_ASN1_PARSE_ERROR,
  MSG_TEST_ASN1_CREATE_PARSE_MISMATCH,
  MSG_TEST_ASN1_DER_ENCODE_ERROR,
  MSG_TEST_ASN1_DER_ENCODE_RESULT_MISMATCH,
  MSG_TEST_ASN1_DER_DECODE_ERROR,
  MSG_TEST_ASN1_DER_DECODE_RESULT_MISMATCH,
  MSG_TEST_SIGN_ERROR,
  MSG_TEST_SIGN_INVALID_RESULT,
  MSG_TEST_VERIFY_ERROR,
  MSG_TEST_VERIFY_INVALID_RESULT,
  MSG_TEST_CMS_DER_ENCODE_ERROR,
  MSG_TEST_CMS_DER_ENCODE_RESULT_MISMATCH,
  MSG_TEST_CMS_DER_DECODE_ERROR,
  MSG_TEST_CMS_DER_DECODE_RESULT_MISMATCH,
  MSG_TEST_ENCRYPT_ERROR,
  MSG_TEST_ENCRYPT_INVALID_RESULT,
  MSG_TEST_DECRYPT_ERROR,
  MSG_TEST_DECRYPT_INVALID_RESULT,
  MSG_TEST_CONSTRUCT_ERROR,
  MSG_TEST_DECONSTRUCT_ERROR,
  MSG_TEST_DECONSTRUCT_INVALID_RESULT
} MsgTestStatus;

typedef enum
{
  REQ_TEST_OK,
  REQ_TEST_UNKNOWN_ERROR,
  REQ_TEST_INVALID_TEST_PARAM,
  REQ_TEST_SETUP_ERROR,
  REQ_TEST_PARAM_HANDLING_OK,
  REQ_TEST_PARAM_HANDLING_ERROR,
  REQ_TEST_INVALID_TEST_SELECTION,
  REQ_TEST_ENCRYPT_HANDLER_ERROR,
  REQ_TEST_DECRYPT_HANDLER_ERROR,
  REQ_TEST_ENCRYPT_DECRYPT_ERROR,
  REQ_TEST_SERVICE_REQUEST_ERROR,
  REQ_TEST_SERVICE_REQUEST_INVALID_RESULT
} ReqTestStatus;

#endif /* TEST_DEFINES_H_ */
